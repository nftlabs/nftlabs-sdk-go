{
  "EditionDrop": {
    "name": "EditionDrop",
    "summary": "",
    "description": "",
    "example": "\nimport (\n\tthirdweb \"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetEditionDrop(\"{{contract_address}}\")\n",
    "methods": [
      {
        "name": "ClaimTo",
        "summary": "",
        "example": "address = \"{{wallet_address}}\"\ntokenId = 0\nquantity = 1\n\ntx, err := contract.ClaimTo(address, tokenId, quantity)\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-claimto"
      },
      {
        "name": "CreateBatch",
        "summary": "",
        "example": "image0, err := os.Open(\"path/to/image/0.jpg\")\ndefer image0.Close()\n\nimage1, err := os.Open(\"path/to/image/1.jpg\")\ndefer image1.Close()\n\nmetadatasWithSupply := []*thirdweb.EditionMetadataInput{\n\t&thirdweb.EditionMetadataInput{\n\t\tMetadata: &thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t\tImage: image0,\n\t\t},\n\t\tSupply: 100,\n\t},\n\t&thirdweb.EditionMetadataInput{\n\t\tMetadata: &thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t\tImage: image1,\n\t\t},\n\t\tSupply: 100,\n\t},\n}\n\ntx, err := contract.MintBatchTo(\"{{wallet_address}}\", metadatasWithSupply)\n```\n\n## type [EditionMetadata](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L44-L47>)\n\n```go\ntype EditionMetadata struct {\n    Metadata *NFTMetadata\n    Supply   int\n}\n```\n\n## type [EditionMetadataInput](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L56-L59>)\n\n```go\ntype EditionMetadataInput struct {\n    Metadata *NFTMetadataInput\n    Supply   int\n}\n```\n\n## type [EditionMetadataOwner](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L49-L54>)\n\n```go\ntype EditionMetadataOwner struct {\n    Metadata      *NFTMetadata\n    Supply        int\n    Owner         string\n    QuantityOwned int\n}\n```\n\n## type [EditionResult](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/erc1155.go#L23-L26>)\n\n```go\ntype EditionResult struct {\n    // contains filtered or unexported fields\n}\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-createbatch"
      },
      {
        "name": "BalanceOf",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\ntokenId := 0\nbalance, err := contract.BalanceOf(address, tokenId)\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-balanceof"
      },
      {
        "name": "Burn",
        "summary": "",
        "example": "tokenId := 0\namount := 1\ntx, err := contract.Burn(tokenId, amount)\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-burn"
      },
      {
        "name": "Get",
        "summary": "",
        "example": "nft, err := contract.Get(0)\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-get"
      },
      {
        "name": "GetAll",
        "summary": "",
        "example": "nfts, err := contract.GetAll()\nsupplyOne := nfts[0].Supply\nnameOne := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-getall"
      },
      {
        "name": "GetOwned",
        "summary": "",
        "example": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-getowned"
      },
      {
        "name": "Transfer",
        "summary": "",
        "example": "to := \"0x...\"\ntokenId := 0\namount := 1\n\ntx, err := contract.Transfer(to, tokenId, amount)\n",
        "reference": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-transfer"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/go/edition_drop"
  },
  "Edition": {
    "name": "Edition",
    "summary": "",
    "description": "",
    "example": "\nimport (\n\tthirdweb \"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetEdition(\"{{contract_address}}\")\n",
    "methods": [
      {
        "name": "MintBatchTo",
        "summary": "",
        "example": "metadatasWithSupply := []*thirdweb.EditionMetadataInput{\n\t&thirdweb.EditionMetadataInput{\n\t\tMetadata: &thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t},\n\t\tSupply: 100,\n\t},\n\t&thirdweb.EditionMetadataInput{\n\t\tMetadata: &thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t},\n\t\tSupply: 100,\n\t},\n}\n\ntx, err := contract.MintBatchTo(\"{{wallet_address}}\", metadatasWithSupply)\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-mintbatchto"
      },
      {
        "name": "MintTo",
        "summary": "",
        "example": "image, err := os.Open(\"path/to/image.jpg\")\ndefer image.Close()\n\nmetadataWithSupply := &thirdweb.EditionMetadataInput{\n\tMetadata: &thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t\tImage: image,\n\t},\n\tSupply: 100,\n}\n\ntx, err := contract.MintTo(\"{{wallet_address}}\", metadataWithSupply)\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-mintto"
      },
      {
        "name": "BalanceOf",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\ntokenId := 0\nbalance, err := contract.BalanceOf(address, tokenId)\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-balanceof"
      },
      {
        "name": "Burn",
        "summary": "",
        "example": "tokenId := 0\namount := 1\ntx, err := contract.Burn(tokenId, amount)\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-burn"
      },
      {
        "name": "Get",
        "summary": "",
        "example": "nft, err := contract.Get(0)\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-get"
      },
      {
        "name": "GetAll",
        "summary": "",
        "example": "nfts, err := contract.GetAll()\nsupplyOne := nfts[0].Supply\nnameOne := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-getall"
      },
      {
        "name": "GetOwned",
        "summary": "",
        "example": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-getowned"
      },
      {
        "name": "Transfer",
        "summary": "",
        "example": "to := \"0x...\"\ntokenId := 0\namount := 1\n\ntx, err := contract.Transfer(to, tokenId, amount)\n",
        "reference": "https://docs.thirdweb.com/go/edition#func-edition-transfer"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/go/edition"
  },
  "NFTCollection": {
    "name": "NFTCollection",
    "summary": "",
    "description": "",
    "example": "\nimport (\n\tthirdweb \"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetNFTCollection(\"{{contract_address}}\")\n",
    "methods": [
      {
        "name": "MintBatchTo",
        "summary": "",
        "example": "metadatas := []*thirdweb.NFTMetadataInput{\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t}\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT 2\",\n\t\tDescription: \"This is also a cool NFT\",\n\t}\n}\n\ntx, err := contract.MintBatchTo(\"{{wallet_address}}\", metadatas)\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-mintbatchto"
      },
      {
        "name": "MintTo",
        "summary": "",
        "example": "image, err := os.Open(\"path/to/image.jpg\")\ndefer image.Close()\n\nmetadata := &thirdweb.NFTMetadataInput{\n\tName: \"Cool NFT\",\n\tDescription: \"This is a cool NFT\",\n\tImage: image,\n}\n\ntx, err := contract.MintTo(\"{{wallet_address}}\", metadata)\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-mintto"
      },
      {
        "name": "BalanceOf",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf(address)\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-balanceof"
      },
      {
        "name": "Burn",
        "summary": "",
        "example": "tokenId := 0\ntx, err := contract.Burn(tokenId)\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-burn"
      },
      {
        "name": "Get",
        "summary": "",
        "example": "nft, err := contract.Get(0)\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-get"
      },
      {
        "name": "GetAll",
        "summary": "",
        "example": "nfts, err := contract.GetAll()\nownerOne := nfts[0].Owner\nnameOne := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-getall"
      },
      {
        "name": "GetOwned",
        "summary": "",
        "example": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-getowned"
      },
      {
        "name": "Transfer",
        "summary": "",
        "example": "to := \"0x...\"\ntokenId := 0\n\ntx, err := contract.Transfer(to, tokenId)\n",
        "reference": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-transfer"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/go/nft_collection"
  },
  "NFTDrop": {
    "name": "NFTDrop",
    "summary": "",
    "description": "",
    "example": "\nimport (\n\tthirdweb \"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetNFTDrop(\"{{contract_address}}\")\n",
    "methods": [
      {
        "name": "ClaimTo",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\nquantity = 1\n\ntx, err := contract.ClaimTo(address, quantity)\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-claimto"
      },
      {
        "name": "CreateBatch",
        "summary": "",
        "example": "image0, err := os.Open(\"path/to/image/0.jpg\")\ndefer image0.Close()\n\nimage1, err := os.Open(\"path/to/image/1.jpg\")\ndefer image1.Close()\n\nmetadatas := []*thirdweb.NFTMetadataInput{\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t\tImage: image1\n\t}\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT 2\",\n\t\tDescription: \"This is also a cool NFT\",\n\t\tImage: image2\n\t}\n}\n\ntx, err := contract.CreateBatch(metadatas)\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-createbatch"
      },
      {
        "name": "GetAllClaimed",
        "summary": "",
        "example": "claimedNfts, err := contract.GetAllClaimed()\nfirstOwner := claimedNfts[0].Owner\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getallclaimed"
      },
      {
        "name": "GetAllUnclaimed",
        "summary": "",
        "example": "unclaimedNfts, err := contract.GetAllUnclaimed()\nfirstNftName := unclaimedNfts[0].Name\n```\n\n## type [NFTMetadata](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L17-L27>)\n\n```go\ntype NFTMetadata struct {\n    Id              *big.Int    `json:\"id\"`\n    Uri             string      `json:\"uri\"`\n    Name            string      `json:\"name\"`\n    Description     string      `json:\"description\"`\n    Image           interface{} `json:\"image\"`\n    ExternalUrl     string      `json:\"external_url\"`\n    AnimationUrl    string      `json:\"animation_url\"`\n    BackgroundColor string      `json:\"background_color\"`\n    Properties      interface{} `json:\"properties,omitempty\"`\n}\n```\n\n## type [NFTMetadataInput](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L29-L37>)\n\n```go\ntype NFTMetadataInput struct {\n    Name            string      `json:\"name\"`\n    Description     string      `json:\"description\"`\n    Image           interface{} `json:\"image\"`\n    ExternalUrl     string      `json:\"external_url\"`\n    AnimationUrl    string      `json:\"animation_url\"`\n    BackgroundColor string      `json:\"background_color\"`\n    Properties      interface{} `json:\"properties,omitempty\"`\n}\n```\n\n## type [NFTMetadataOwner](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L39-L42>)\n\n```go\ntype NFTMetadataOwner struct {\n    Metadata *NFTMetadata\n    Owner    string\n}\n```\n\n## type [NFTResult](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/erc721.go#L23-L26>)\n\n```go\ntype NFTResult struct {\n    // contains filtered or unexported fields\n}\n```\n\n## type [NativeToken](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L113-L118>)\n\n```go\ntype NativeToken struct {\n    // contains filtered or unexported fields\n}\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getallunclaimed"
      },
      {
        "name": "BalanceOf",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf(address)\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-balanceof"
      },
      {
        "name": "Burn",
        "summary": "",
        "example": "tokenId := 0\ntx, err := contract.Burn(tokenId)\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-burn"
      },
      {
        "name": "Get",
        "summary": "",
        "example": "nft, err := contract.Get(0)\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-get"
      },
      {
        "name": "GetAll",
        "summary": "",
        "example": "nfts, err := contract.GetAll()\nownerOne := nfts[0].Owner\nnameOne := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getall"
      },
      {
        "name": "GetOwned",
        "summary": "",
        "example": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getowned"
      },
      {
        "name": "Transfer",
        "summary": "",
        "example": "to := \"0x...\"\ntokenId := 0\n\ntx, err := contract.Transfer(to, tokenId)\n",
        "reference": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-transfer"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/go/nft_drop"
  },
  "Token": {
    "name": "Token",
    "summary": "",
    "description": "",
    "example": "\nimport (\n\tthirdweb \"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetToken(\"{{contract_address}}\")\n",
    "methods": [
      {
        "name": "MintBatchTo",
        "summary": "",
        "example": "args = []*thirdweb.TokenAmount{\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"{{wallet_address}}\",\n\t\tAmount:    1\n\t}\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"{{wallet_address}}\",\n\t\tAmount:    2\n\t}\n}\n\ntx, err := contract.MintBatchTo(args)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-mintbatchto"
      },
      {
        "name": "MintTo",
        "summary": "",
        "example": "tx, err := contract.MintTo(\"{{wallet_address}}\", 1)\n```\n\n## type [TokenAmount](<https://github.com/thirdweb-dev/go-sdk/blob/main/pkg/thirdweb/types.go#L102-L105>)\n\n```go\ntype TokenAmount struct {\n    ToAddress string\n    Amount    float64\n}\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-mintto"
      },
      {
        "name": "Allowance",
        "summary": "",
        "example": "spender := \"0x...\"\n\nallowance, err := contract.Allowance(spender)\nallowanceValue := allowance.DisplayValue\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-allowance"
      },
      {
        "name": "AllowanceOf",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\nspender := \"0x...\"\n\nallowance, err := contract.AllowanceOf(address, spender)\nallowanceValue := allowance.DisplayValue\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-allowanceof"
      },
      {
        "name": "Balance",
        "summary": "",
        "example": "balance, err := contract.Balance()\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-balance"
      },
      {
        "name": "BalanceOf",
        "summary": "",
        "example": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf()\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-balanceof"
      },
      {
        "name": "Burn",
        "summary": "",
        "example": "amount := 1\ntx, err := contract.Burn(amount)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-burn"
      },
      {
        "name": "BurnFrom",
        "summary": "",
        "example": "holder := \"0x...\"\namount := 1\n\ntx, err := contract.BurnFrom(holder, amount)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-burnfrom"
      },
      {
        "name": "Get",
        "summary": "",
        "example": "currency, err := contract.Get()\nsymbol := currency.Symbol\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-get"
      },
      {
        "name": "SetAllowance",
        "summary": "",
        "example": "spender := \"0x...\"\namount := 1\n\ntx, err := contract.SetAllowance(spender, amount)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-setallowance"
      },
      {
        "name": "Transfer",
        "summary": "",
        "example": "to := \"0x...\"\n```\n\namount := 1\n\n```\ntx, err := contract.Transfer(to, amount)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-transfer"
      },
      {
        "name": "TransferBatch",
        "summary": "",
        "example": "args = []*thirdweb.TokenAmount{\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"0x...\",\n\t\tAmount:    1\n\t}\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"0x...\",\n\t\tAmount:    2\n\t}\n}\n\ntx, err := contract.TransferBatch(args)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-transferbatch"
      },
      {
        "name": "TransferFrom",
        "summary": "",
        "example": "from := \"{{wallet_address}}\"\nto := \"0x...\"\n```\n\namount := 1\n\n```\ntx, err := contract.Transfer(from, to, amount)\n",
        "reference": "https://docs.thirdweb.com/go/token#func-token-transferfrom"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/go/token"
  }
}